@page "/"
@inject HttpClient Http

<h1>River Crossing Game</h1>



@if (_game == null)
{
    <button class="btn btn-primary" onclick="@(e => StartGame())">Start Game </button>
}
else
{
    <div style="margin-top:30px;margin-bottom:30px;display:inline-block;">
        <span>Rules</span>
        <ul type="circle">
            <li>Farmer need to be present to row the boat</li>
            <li>Maximum of only two characters can be in the boat</li>
            <li>If left unattended together, the fox would eat the goose</li>
            <li>If left unattended together, the goose would eat the bean</li>
        </ul>
        <button class="btn btn-primary" onclick="@(e => StartGame())">New Game</button>
    </div>
    <p>Time started: @_game.StartTime.ToString("HH:mm:ss")</p>

    @if (_game.GameState.State == State.Fail)
    {
        var totalTime = _game.TotalTime;

        <p style="background-color:red">@_game.GameState.Reason</p>
        <p>Total time taken: @totalTime.Hours hrs:@totalTime.Minutes mins:@totalTime.Seconds secs</p>

    }
    else if (_game.GameState.State == State.Success)
    {
        var totalTime = _game.TotalTime;

        <p>Game successfully completed</p>
        <p>Total time taken: @totalTime.Hours hrs:@totalTime.Minutes mins:@totalTime.Seconds secs</p>
    }

    <table class="table" width="100%">
        <colgroup>
            <col class="bank" style="background-color: lightgray" />
            <col class="boat" />
            <col class="river" style="background-color:cornflowerblue" />
            <col class="boat" />
            <col class="bank" style="background-color: lightgray" />
        </colgroup>
        <thead>
            <tr>
                <th text-align="center" width="20%">Left Bank</th>
                <th width="20%">
                    @if (_boatState == BoatState.Left)
                    {
                        <span>Boat</span>
                        @*<button class="btn btn-primary" onclick="@(e => MoveBoat())">Row to Right</button>*@
                    }
                </th>
                <th width="20%" text-align="center">River</th>
                <th width="20%">
                    @if (_boatState == BoatState.Right)
                    {
                        <span>Boat</span>

                        @*<button class="btn btn-primary" onclick="@(e => MoveBoat())">Row to Left</button>*@
                    }
                </th>
                <th text-align="center" width="200%">Right Bank</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td></td>
                <td>
                    @if (_boatState == BoatState.Left)
                    {
                        <button class="btn btn-primary" onclick="@(e => MoveBoat())">Row to Right</button>
                    }
                </td>
                <td></td>
                <td>
                    @if (_boatState == BoatState.Right)
                    {
                        <button class="btn btn-primary" onclick="@(e => MoveBoat())">Row to Left</button>
                    }
                </td>
                <td></td>
            </tr>
            @foreach (var character in _game.GameState.Characters)
            {
                <tr>
                    <td>
                        @if (character.Location == Location.LeftBank)
                        {
                            <button class="btn btn-primary" id=@character.Name onclick="@(e => AddCharacterToBoat(character.Name))">@character.Name </button>
                        }
                    </td>
                    <td>
                        @if (character.Location == Location.Boat && _boatState == BoatState.Left)
                        {
                            @character.Name
                            <button class="btn btn-primary" onclick="@(e => DisembarkCharacter(character.Name, Location.LeftBank))"><<<</button>
                        }

                    </td>
                    <td></td>

                    <td>
                        @if (character.Location == Location.Boat && _boatState == BoatState.Right)
                        {
                            @character.Name
                            <button class="btn btn-primary" onclick="@(e => DisembarkCharacter(character.Name, Location.RightBank))">>>></button>
                        }
                    </td>
                    <td>
                        @if (character.Location == Location.RightBank)
                        {
                            <button class="btn btn-primary" id=@character.Name onclick="@(e => AddCharacterToBoat(character.Name))">@character.Name </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {

Game _game;
BoatState _boatState;

async Task StartGame()
{
    _boatState = BoatState.Left;
    _game = await Http.PostJsonAsync<Game>("https://localhost:5001/api/Games", new { });
    await Refresh();

}
protected override async Task OnInitAsync()
{
    try
    {
        await Refresh();
    }
    catch (Exception e)
    {
        Console.WriteLine(e.Message);
    }
}

private async Task Refresh()
{
    var id = _game.Id;
    _game = await Http.GetJsonAsync<Game>($"https://localhost:5001/api/Games/{id}");
    StateHasChanged();
}

void AddCharacterToBoat(string characterName)
{
    if (_game.GameState.Characters.Count<Character>(e => e.Location == Location.Boat) >= 2)
    {
        return;
    }
    _game.GameState.Characters.Single<Character>(e => e.Name == characterName).Location = Location.Boat;
}

async Task MoveBoat()
{
    var farmerPresent = _game.GameState.Characters.Any(e => (e.Name == "Farmer" && e.Location == Location.Boat));
    if (farmerPresent)
    {
        _game = await Http.PutJsonAsync<Game>($"https://localhost:5001/api/Games/{_game.Id}", _game);

        if (_game.GameState.State == State.InProgress)
        {
            if (_boatState == BoatState.Left)
            {
                _boatState = BoatState.Right;
            }
            else
            {
                _boatState = BoatState.Left;

            }
        }

        await Refresh();
    }
}

async Task DisembarkCharacter(string characterName, Location location)
{


    _game.GameState.Characters.Single<Character>(e => e.Name == characterName).Location = location;
    var allCharactersCrossed = _game.GameState.Characters.All(s => s.Location == Location.RightBank);
    if (allCharactersCrossed)
    {
        _game = await Http.PutJsonAsync<Game>($"https://localhost:5001/api/Games/{_game.Id}", _game);
        await Refresh();
    }
}

public class Game
{
    public int Id { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public TimeSpan TotalTime { get; set; }
    public GameState GameState { get; set; }
}

public class GameState
{
    public int Id { get; set; }
    public List<Character> Characters { get; set; }
    public State State { get; set; }
    public string Reason { get; set; }
    public int GameID { get; set; }
}

public enum State
{
    InProgress,
    Fail,
    Success
}

public enum BoatState
{
    Left,
    Right
}
public class Character
{
    public int Id { get; set; }
    public Location Location { get; set; }
    public string Name { get; set; }
    public int GameStateId { get; set; }
}

public enum Location
{
    LeftBank,
    Boat,
    RightBank
}

}